// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package math_service

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *AddRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddRequest[number], err)
}

func (x *AddRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Left, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *AddRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Right, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *AddResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AddResponse[number], err)
}

func (x *AddResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Sum, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SubRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubRequest[number], err)
}

func (x *SubRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Left, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SubRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Right, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SubResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubResponse[number], err)
}

func (x *SubResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Diff, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *AddRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AddRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Left == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetLeft())
	return offset
}

func (x *AddRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Right == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetRight())
	return offset
}

func (x *AddResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *AddResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Sum == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetSum())
	return offset
}

func (x *SubRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SubRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Left == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetLeft())
	return offset
}

func (x *SubRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Right == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetRight())
	return offset
}

func (x *SubResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SubResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Diff == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetDiff())
	return offset
}

func (x *AddRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AddRequest) sizeField1() (n int) {
	if x.Left == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetLeft())
	return n
}

func (x *AddRequest) sizeField2() (n int) {
	if x.Right == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetRight())
	return n
}

func (x *AddResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *AddResponse) sizeField1() (n int) {
	if x.Sum == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetSum())
	return n
}

func (x *SubRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SubRequest) sizeField1() (n int) {
	if x.Left == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetLeft())
	return n
}

func (x *SubRequest) sizeField2() (n int) {
	if x.Right == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetRight())
	return n
}

func (x *SubResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SubResponse) sizeField1() (n int) {
	if x.Diff == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetDiff())
	return n
}

var fieldIDToName_AddRequest = map[int32]string{
	1: "Left",
	2: "Right",
}

var fieldIDToName_AddResponse = map[int32]string{
	1: "Sum",
}

var fieldIDToName_SubRequest = map[int32]string{
	1: "Left",
	2: "Right",
}

var fieldIDToName_SubResponse = map[int32]string{
	1: "Diff",
}
