// Code generated by hertz generator.

package student_service

import (
	"context"
	"fmt"

	student_service "dqq/go/math/biz/model/student_service"
	"github.com/cloudwego/hertz/pkg/common/config"
	"github.com/cloudwego/hertz/pkg/protocol"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

type Client interface {
	Query(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error)

	Restful(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error)

	PostForm(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error)

	PostJson(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error)

	PostPb(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error)

	Header(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error)

	Cookie(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error)
}

type StudentServiceClient struct {
	client *cli
}

func NewStudentServiceClient(hostUrl string, ops ...Option) (Client, error) {
	opts := getOptions(append(ops, withHostUrl(hostUrl))...)
	cli, err := newClient(opts)
	if err != nil {
		return nil, err
	}
	return &StudentServiceClient{
		client: cli,
	}, nil
}

func (s *StudentServiceClient) Query(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	httpResp := &student_service.Info{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setPathParams(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		addHeaders(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/student")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *StudentServiceClient) Restful(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	httpResp := &student_service.Info{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setPathParams(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		addHeaders(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/student/:name/*addr")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *StudentServiceClient) PostForm(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	httpResp := &student_service.Info{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setPathParams(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		addHeaders(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/student/form")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *StudentServiceClient) PostJson(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	httpResp := &student_service.Info{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setPathParams(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		addHeaders(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/student/json")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *StudentServiceClient) PostPb(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	httpResp := &student_service.Info{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setPathParams(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		addHeaders(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/student/pb")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *StudentServiceClient) Header(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	httpResp := &student_service.Info{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setPathParams(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		addHeaders(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/student/header")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

func (s *StudentServiceClient) Cookie(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	httpResp := &student_service.Info{}
	ret, err := s.client.r().
		setContext(context).
		setQueryParams(map[string]interface{}{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setPathParams(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		addHeaders(map[string]string{
			"name,required": req.GetName(),
			"addr":          req.GetAddress(),
		}).
		setFormParams(map[string]string{}).
		setFormFileParams(map[string]string{}).
		setBodyParam(req).
		setRequestOption(reqOpt...).
		setResult(httpResp).
		execute("POST", "/student/cookie")
	if err != nil {
		return nil, nil, err
	}

	resp = httpResp
	rawResponse = ret.rawResponse
	return resp, rawResponse, nil
}

var defaultClient, _ = NewStudentServiceClient("")

func ConfigDefaultClient(ops ...Option) (err error) {
	defaultClient, err = NewStudentServiceClient("", ops...)
	return
}

func Query(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	return defaultClient.Query(context, req, reqOpt...)
}

func Restful(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	return defaultClient.Restful(context, req, reqOpt...)
}

func PostForm(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	return defaultClient.PostForm(context, req, reqOpt...)
}

func PostJson(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	return defaultClient.PostJson(context, req, reqOpt...)
}

func PostPb(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	return defaultClient.PostPb(context, req, reqOpt...)
}

func Header(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	return defaultClient.Header(context, req, reqOpt...)
}

func Cookie(context context.Context, req *student_service.Student, reqOpt ...config.RequestOption) (resp *student_service.Info, rawResponse *protocol.Response, err error) {
	return defaultClient.Cookie(context, req, reqOpt...)
}
