// Code generated by hertz generator.

package main

import (
	"context"
	"dqq/go/math/biz/handler"
	middleware "dqq/go/math/middle_ware"
	"os"
	"time"

	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/app/server/binding"
	"github.com/cloudwego/hertz/pkg/common/hlog"
)

func InitLog() {
	f, err := os.OpenFile("./log/server.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	hlog.SetOutput(f) //重定向到文件
	//logger 的默认输出位置为 os.stdout，在重定向后将不会在终端输出。如果想同时输出到终端和路径，可以使用MultiWriter
	// hlog.SetOutput(io.MultiWriter(f, os.Stdout))
	hlog.SetLevel(hlog.LevelInfo)
}

// 接收到kill信号时做一些收尾的工作
func ShutDown(ctx context.Context) {
	//把channel里的任务处理完
	//Flush各种缓存
	//释放各种连接
}

func main() {
	InitLog()

	validateConfig := &binding.ValidateConfig{}
	validateConfig.MustRegValidateFunc("before_today", handler.BeforeToday)
	validateConfig.SetValidatorErrorFactory(func(failField, msg string) error {
		err := handler.ValidateError{
			FailField: failField,
			Msg:       msg,
		}

		return &err
	})

	addr := "localhost:5678"
	// engine := server.Default()  // Default()默认使用了Recovery中间件
	engine := server.New(
		server.WithHostPorts(addr),
		server.WithMaxRequestBodySize(1<<20),      //默认是4M
		server.WithStreamBody(false),              //如果为true，则当请求体超过MaxRequestBodySize时，会控制流的方式来读取请求体（适用于上传大文件的场景）
		server.WithExitWaitTime(1*time.Second),    //设置优雅退出时间，默认是5s
		server.WithValidateConfig(validateConfig), //参数校验配置
	)
	engine.Engine.OnShutdown = append(engine.Engine.OnShutdown, ShutDown) //优雅地退出

	//全启中间件
	engine.Use(recovery.Recovery())
	engine.Use(middleware.TimeMW)

	// 静态资源
	engine.Static("/css", "./static")                       //在url里访问目录/css相当于访问文件系统中的static/css目录
	engine.StaticFile("/favicon.ico", "static/img/dqq.png") //在url中访问文件/favicon.ico，相当于访问文件系统中的views/img/dqq.png文件
	// engine.LoadHTMLFiles("static/template.html","static/student.html")
	engine.LoadHTMLGlob("static/*.html") //加载模板文件

	register(engine)

	engine.Spin()
}
